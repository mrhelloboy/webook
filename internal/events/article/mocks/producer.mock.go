// Code generated by MockGen. DO NOT EDIT.
// Source: producer.go
//
// Generated by this command:
//
//	mockgen -source=producer.go -destination=mocks/producer.mock.go -package=evtArtMock Producer
//

// Package evtArtMock is a generated GoMock package.
package evtArtMock

import (
	context "context"
	reflect "reflect"

	article "github.com/mrhelloboy/wehook/internal/events/article"
	gomock "go.uber.org/mock/gomock"
)

// MockProducer is a mock of Producer interface.
type MockProducer struct {
	ctrl     *gomock.Controller
	recorder *MockProducerMockRecorder
}

// MockProducerMockRecorder is the mock recorder for MockProducer.
type MockProducerMockRecorder struct {
	mock *MockProducer
}

// NewMockProducer creates a new mock instance.
func NewMockProducer(ctrl *gomock.Controller) *MockProducer {
	mock := &MockProducer{ctrl: ctrl}
	mock.recorder = &MockProducerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProducer) EXPECT() *MockProducerMockRecorder {
	return m.recorder
}

// ProduceReadEvent mocks base method.
func (m *MockProducer) ProduceReadEvent(ctx context.Context, evt article.ReadEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProduceReadEvent", ctx, evt)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProduceReadEvent indicates an expected call of ProduceReadEvent.
func (mr *MockProducerMockRecorder) ProduceReadEvent(ctx, evt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProduceReadEvent", reflect.TypeOf((*MockProducer)(nil).ProduceReadEvent), ctx, evt)
}

// ProduceReadEventV1 mocks base method.
func (m *MockProducer) ProduceReadEventV1(ctx context.Context, evts article.ReadEventV1) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ProduceReadEventV1", ctx, evts)
}

// ProduceReadEventV1 indicates an expected call of ProduceReadEventV1.
func (mr *MockProducerMockRecorder) ProduceReadEventV1(ctx, evts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProduceReadEventV1", reflect.TypeOf((*MockProducer)(nil).ProduceReadEventV1), ctx, evts)
}
